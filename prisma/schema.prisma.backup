// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS: For data integrity, ensuring only specific values are allowed
enum UserRole {
  CLIENT
  PARALEGAL
  ASSOCIATE
  PARTNER
}

enum CaseStatus {
  OPEN
  CLOSED
  PENDING
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

// MODELS: These will become tables in your database

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  passwordHash String
  role         UserRole  @default(CLIENT)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  casesAsClient   Case[]           @relation("ClientCases")
  tasksAssignedBy Task[]           @relation("AssignedBy")
  tasksAssignedTo Task[]           @relation("AssignedTo")
  documents       Document[]
  caseAssignments CaseAssignment[]

  // --- ADDED for Appointments ---
  createdAppointments   Appointment[]           @relation("CreatedAppointments")
  appointmentAttendance AppointmentAttendee[]
}

model Case {
  id          String      @id @default(cuid())
  caseName    String
  caseNumber  String?     @unique
  description String?
  status      CaseStatus  @default(OPEN)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  client          User             @relation("ClientCases", fields: [clientId], references: [id])
  clientId        String
  tasks           Task[]
  documents       Document[]
  caseAssignments CaseAssignment[]
}

model CaseAssignment {
  id        String   @id @default(cuid())
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  assignedAt DateTime @default(now())

  @@unique([caseId, userId])
}

model Task {
  id               String     @id @default(cuid())
  title            String
  description      String?
  status           TaskStatus @default(TODO)
  deadline         DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relationships
  case             Case       @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId           String
  assignedBy       User       @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedById     String
  assignedTo       User       @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId     String
}

model Document {
  id               String   @id @default(cuid())
  fileName         String
  fileType         String
  storageProvider  String
  storageKey       String
  createdAt        DateTime @default(now())

  // Relationships
  case             Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  caseId           String
  uploadedBy       User     @relation(fields: [uploadedById], references: [id])
  uploadedById     String
}

// --- ADDED for Appointments ---

model Appointment {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // The user who created the appointment
  createdBy   User      @relation("CreatedAppointments", fields: [createdById], references: [id])
  createdById String

  // The attendees of the appointment (many-to-many relationship)
  attendees   AppointmentAttendee[]
}

model AppointmentAttendee {
  id            String      @id @default(cuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  status        String      @default("PENDING") // PENDING, ACCEPTED, DECLINED

  @@unique([appointmentId, userId])
}